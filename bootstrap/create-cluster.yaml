steps:

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: Read cluster intent, create cluster, and configure configsync
  script: |
    #!/usr/bin/env bash
    set -x
    apt-get update
    apt-get install -y gettext-base
    apt-get install -y csvtool

    gsutil cp gs://$CLUSTER_INTENT_BUCKET/cluster-intent-registry.csv .

    export CLUSTER_INTENT_ROW=$(awk -F , "\$1 == \"$NODE_LOCATION\" || \$1 == \"\\\"$NODE_LOCATION\\\"\"" cluster-intent-registry.csv)

    echo $CLUSTER_INTENT_ROW

    if [ -z "$CLUSTER_INTENT_ROW" ]; then
      echo "Cluster intent not found for $NODE_LOCATION"
      exit 1
    fi

    export CLUSTER_INTENT_HEADER=$(head -1 cluster-intent-registry.csv)
    export CLUSTER_INTENT="$CLUSTER_INTENT_HEADER"$'\n'"$CLUSTER_INTENT_ROW"

    # Set parameters from cluster intent
    export NODE_LOCATION=$(echo "$CLUSTER_INTENT" | csvtool namedcol "NODE_LOCATION" - | csvtool drop 1 -)
    export MACHINE_PROJECT_ID=$(echo "$CLUSTER_INTENT" | csvtool namedcol "MACHINE_PROJECT_ID" - | csvtool drop 1 -)
    export FLEET_PROJECT_ID=$(echo "$CLUSTER_INTENT" | csvtool namedcol "FLEET_PROJECT_ID" - | csvtool drop 1 -)
    export CLUSTER_NAME=$(echo "$CLUSTER_INTENT" | csvtool namedcol "CLUSTER_NAME" - | csvtool drop 1 -)
    export LOCATION=$(echo "$CLUSTER_INTENT" | csvtool namedcol "LOCATION" - | csvtool drop 1 -)
    export NODE_COUNT=$(echo "$CLUSTER_INTENT" | csvtool namedcol "NODE_COUNT" - | csvtool drop 1 -)
    export EXTERNAL_LOAD_BALANCER_IPV4_ADDRESS_POOLS=$(echo "$CLUSTER_INTENT" | csvtool namedcol "EXTERNAL_LOAD_BALANCER_IPV4_ADDRESS_POOLS" - | csvtool drop 1 -)
    export SYNC_REPO=$(echo "$CLUSTER_INTENT" | csvtool namedcol "SYNC_REPO" - | csvtool drop 1 -)
    export SYNC_BRANCH=$(echo "$CLUSTER_INTENT" | csvtool namedcol "SYNC_BRANCH" - | csvtool drop 1 -)
    export SYNC_DIR=$(echo "$CLUSTER_INTENT" | csvtool namedcol "SYNC_DIR" - | csvtool drop 1 -)
    export GIT_TOKEN_SECRETS_MANAGER_NAME=$(echo "$CLUSTER_INTENT" | csvtool namedcol "GIT_TOKEN_SECRETS_MANAGER_NAME" - | csvtool drop 1 -)
    export ES_AGENT_SECRETS_MANAGER_NAME=$(echo "$CLUSTER_INTENT" | csvtool namedcol "ES_AGENT_SECRETS_MANAGER_NAME" - | csvtool drop 1 -)
    export CLUSTER_VERSION=$(echo "$CLUSTER_INTENT" | csvtool namedcol "CLUSTER_VERSION" - | csvtool drop 1 -)


    if [ -n "${EDGE_CONTAINER_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/edgecontainer to $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/edgecontainer $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE
    fi

    if [ -n "${GKEHUB_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/gkehub to $GKEHUB_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/gkehub $GKEHUB_API_ENDPOINT_OVERRIDE
    fi

    gcloud edge-cloud container clusters describe $CLUSTER_NAME --location $LOCATION

    if [ $? -eq 0 ]; then
      echo "Cluster already created, skipping to next step."
    else
      echo "Creating cluster"

      gcloud edge-cloud container clusters create $CLUSTER_NAME \
          --control-plane-node-location=$NODE_LOCATION \
          --control-plane-node-count=$NODE_COUNT \
          --external-lb-ipv4-address-pools=$EXTERNAL_LOAD_BALANCER_IPV4_ADDRESS_POOLS \
          --control-plane-shared-deployment-policy=ALLOWED \
          --location=$LOCATION \
          --project=$FLEET_PROJECT_ID \
          --release-channel=NONE \
          --version $CLUSTER_VERSION

      if [ $? -ne 0 ]; then
        echo "Cluster creation failed"
        exit 1
      fi
    fi

    export KUBECONFIG="$(pwd)/gateway-kubeconfig"
    gcloud container fleet memberships get-credentials $CLUSTER_NAME

    gsutil cp gs://$CLUSTER_INTENT_BUCKET/apply-spec.yaml.template .
    gsutil cp gs://$CLUSTER_INTENT_BUCKET/cluster-secret-store.yaml.template .

    envsubst < apply-spec.yaml.template > apply-spec.yaml
    envsubst < cluster-secret-store.yaml.template > cluster-secret-store.yaml

    gcloud secrets versions access latest --secret=$GIT_TOKEN_SECRETS_MANAGER_NAME >> $(pwd)/git-creds
    kubectl create ns config-management-system --dry-run=client -o yaml | kubectl apply -f -
    kubectl create secret generic git-creds --namespace="config-management-system" --from-literal=username=default --from-file=token=$(pwd)/git-creds --dry-run=client -o yaml | kubectl apply -f -

    gcloud beta container fleet config-management apply --membership=$CLUSTER_NAME --config=./apply-spec.yaml

    # TODO(bfogel) - Query against configsync status before proceeding, for now a 60 second sleep is enough for CRDs to deploy.
    sleep 60

    gcloud secrets versions access latest --secret=$ES_AGENT_SECRETS_MANAGER_NAME >> $(pwd)/es-agent.json
    kubectl create ns external-secrets --dry-run=client -o yaml | kubectl apply -f -
    kubectl create secret generic gcp-store-creds --from-file=$(pwd)/es-agent.json -n external-secrets

    # Wait for external secrets CRD before applying ClusterSecretStore
    kubectl wait --for condition=established --timeout=120s crd/externalsecrets.external-secrets.io

    kubectl apply -f cluster-secret-store.yaml
  env:
  - 'NODE_LOCATION=$_NODE_LOCATION'
  - 'EDGE_CONTAINER_API_ENDPOINT_OVERRIDE=$_EDGE_CONTAINER_API_ENDPOINT_OVERRIDE'
  - 'GKEHUB_API_ENDPOINT_OVERRIDE=$_GKEHUB_API_ENDPOINT_OVERRIDE'
  - 'CLUSTER_INTENT_BUCKET=$_CLUSTER_INTENT_BUCKET'
timeout: 14400s
options:
  logging: CLOUD_LOGGING_ONLY
