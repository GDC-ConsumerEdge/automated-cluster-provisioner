# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: Read cluster intent and update cluster
  script: |
    #!/usr/bin/env bash
    # shellcheck disable=SC2155
    set +x
    set -o pipefail

    function die() {
      echo "Cluster Modify Failed: $1"
      exit 1
    }

    function parse_csv_required() {
      input="$1"
      column="$2"

      output=$(echo "$input" | csvtool namedcol "$column" - | csvtool drop 1 - | tr -d '"')

      [[ $? -ne 0 ]] && die "Missing required parameter $2"

      if [ -z "$output" ]; then
        die "Empty required parameter $2"
      fi

      echo "$output"
    }

    function parse_csv_optional() {
      input="$1"
      column="$2"

      output=$(echo "$input" | csvtool namedcol "$column" - | csvtool drop 1 - | tr -d '"')

      echo "$output"
    }

    [[ -z "${STORE_ID}" ]] && die "STORE_ID not set"

    NODE_LOCATION=${ZONE}
    [[ -z "$NODE_LOCATION" ]] && die "ZONE not set"

    apt-get update
    apt-get install -y gettext-base csvtool jq

    TOKEN=$(gcloud secrets versions access latest --secret=$GIT_SECRET_ID \
        --project $GIT_SECRETS_PROJECT_ID)

    git clone -b $SOURCE_OF_TRUTH_BRANCH https://oauth2:$TOKEN@$SOURCE_OF_TRUTH_REPO repo

    cp repo/$SOURCE_OF_TRUTH_PATH ./cluster-intent-registry.csv

    export CLUSTER_INTENT_ROW=$(awk -F , "\$1 == \"$STORE_ID\" || \$1 == \"\\\"$STORE_ID\\\"\"" cluster-intent-registry.csv)
    echo $CLUSTER_INTENT_ROW
    [[ -z "${CLUSTER_INTENT_ROW}" ]] && die "Cluster intent not found for store ${STORE_ID}"

    export CLUSTER_INTENT_HEADER=$(head -1 cluster-intent-registry.csv)
    export CLUSTER_INTENT="$CLUSTER_INTENT_HEADER"$'\n'"$CLUSTER_INTENT_ROW"

    # Set parameters from cluster intent
    export MACHINE_PROJECT_ID=$(parse_csv_required "$CLUSTER_INTENT" "machine_project_id")
    export FLEET_PROJECT_ID=$(parse_csv_required "$CLUSTER_INTENT" "fleet_project_id")
    export CLUSTER_NAME=$(parse_csv_required "$CLUSTER_INTENT" "cluster_name")
    export LOCATION=$(parse_csv_required "$CLUSTER_INTENT" "location")
    export MAINTENANCE_WINDOW_START=$(parse_csv_optional "$CLUSTER_INTENT" "maintenance_window_start")
    export MAINTENANCE_WINDOW_END=$(parse_csv_optional "$CLUSTER_INTENT" "maintenance_window_end")
    export MAINTENANCE_WINDOW_RECURRENCE=$(parse_csv_optional "$CLUSTER_INTENT" "maintenance_window_recurrence")
    export SUBNET_VLANS=$(parse_csv_optional "$CLUSTER_INTENT" "subnet_vlans")

    export MAINTENANCE_EXCLUSION_NAMES=$(echo "$CLUSTER_INTENT" | head -n1 | tr , '\n' | tr -d '"' | sort -n | grep 'maintenance_exclusion_name.*')
    export MAINTENANCE_EXCLUSION_STARTS=$(echo "$CLUSTER_INTENT" | head -n1 | tr , '\n' |  tr -d '"' | sort -n | grep 'maintenance_exclusion_start.*')
    export MAINTENANCE_EXCLUSION_ENDS=$(echo "$CLUSTER_INTENT" | head -n1 | tr , '\n' |  tr -d '"' | sort -n | grep 'maintenance_exclusion_end.*')

    if [ "${#MAINTENANCE_EXCLUSION_NAMES[@]}" -ne "${#MAINTENANCE_EXCLUSION_STARTS[@]}" ] || [ "${#MAINTENANCE_EXCLUSION_NAMES[@]}" -ne "${#MAINTENANCE_EXCLUSION_ENDS[@]}" ]; then
      die "Missing maintenance exclusion window property"
    fi

    if [ -n "${EDGE_CONTAINER_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/edgecontainer to $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/edgecontainer $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE
    fi

    if [ -n "${GKEHUB_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/gkehub to $GKEHUB_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/gkehub $GKEHUB_API_ENDPOINT_OVERRIDE
    fi

    if [ -n "${EDGE_NETWORK_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/edgenetwork to $EDGE_NETWORK_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/edgenetwork $EDGE_NETWORK_API_ENDPOINT_OVERRIDE
    fi

    if [[ -z "${MAINTENANCE_WINDOW_START}" || -z ${MAINTENANCE_WINDOW_END} || \
            -z ${MAINTENANCE_WINDOW_RECURRENCE} ]]; then
      echo "All maintenance window fields are not set, skipping"
      echo "MAINTENANCE_WINDOW_START=${MAINTENANCE_WINDOW_START}"
      echo "MAINTENANCE_WINDOW_END=${MAINTENANCE_WINDOW_END}"
      echo "MAINTENANCE_WINDOW_RECURRENCE=${MAINTENANCE_WINDOW_RECURRENCE}"
    else
      gcloud edge-cloud container clusters update $CLUSTER_NAME \
          --project=$FLEET_PROJECT_ID \
          --location=$LOCATION \
          --maintenance-window-start=$MAINTENANCE_WINDOW_START \
          --maintenance-window-end=$MAINTENANCE_WINDOW_END \
          --maintenance-window-recurrence=$MAINTENANCE_WINDOW_RECURRENCE
      [[ $? -ne 0 ]] && die "Maintenance window update failed"
    fi


    CLUSTER_DESCRIPTION=$(gcloud edge-cloud container clusters describe $CLUSTER_NAME \
      --project=$FLEET_PROJECT_ID \
      --location=$LOCATION \
      --format json)

    [[ $? -ne 0 ]] && die "Unable to describe cluster"

    if jq -e '.maintenancePolicy.maintenanceExclusions == null' <<< "$CLUSTER_DESCRIPTION" > /dev/null; then
      echo "No maintenance exclusions found"
    else
      echo "Clearing existing exclusions windows"

      echo $CLUSTER_DESCRIPTION | jq '.maintenancePolicy.maintenanceExclusions[] | .id' -r | while read exclusion; do
          gcloud edge-cloud container clusters update $CLUSTER_NAME \
          --project=$FLEET_PROJECT_ID \
          --location=$LOCATION \
          --remove-maintenance-exclusion-window $exclusion

          [[ $? -ne 0 ]] && die "Unable to clear maintenance exclusion window"
        done
    fi

    INDEX=0
    for column_name in "${MAINTENANCE_EXCLUSION_NAMES[@]}"; do
      column_start=${MAINTENANCE_EXCLUSION_STARTS[${INDEX}]}
      column_end=${MAINTENANCE_EXCLUSION_ENDS[${INDEX}]}

      name=$(parse_csv_optional "$CLUSTER_INTENT" "$column_name")
      start=$(parse_csv_optional "$CLUSTER_INTENT" "$column_start")
      end=$(parse_csv_optional "$CLUSTER_INTENT" "$column_end")

      if [[ -z "${name}" || -z ${start} || -z ${end} ]]; then
        echo "All maintenance exclusion fields are not set, skipping ${column_name}"
      else
        gcloud edge-cloud container clusters update $CLUSTER_NAME \
            --project=$FLEET_PROJECT_ID \
            --location=$LOCATION \
            --add-maintenance-exclusion-name=$name \
            --add-maintenance-exclusion-start=$start \
            --add-maintenance-exclusion-end=$end
      fi


      [[ $? -ne 0 ]] && die "Unable to add maintenance exclusion window"

      ((INDEX++))
    done

    for vlan in $(echo $SUBNET_VLANS | csvtool transpose -); do
      EXISTING_VLAN=$(gcloud edge-cloud networking subnets list --location $LOCATION \
          --zone $NODE_LOCATION --project $MACHINE_PROJECT_ID \
          --filter="VLANID=$vlan" --format="json")

      [[ $? -ne 0 ]] && die "Unable to query for subnets"

      if [ "$EXISTING_VLAN" = "[]" ]; then
        gcloud edge-cloud networking subnets create "network-$vlan" \
            --vlan-id=$vlan \
            --network=default \
            --location=$LOCATION \
            --zone=$NODE_LOCATION \
            --project $MACHINE_PROJECT_ID 
        [[ $? -ne 0 ]] && die "Subnet creation failed"
      else
        echo "VLAN $vlan already exists"
      fi
    done

    echo "Cluster Modify Succeeded: Completed reconciling $NODE_LOCATION"

  env:
  - 'EDGE_CONTAINER_API_ENDPOINT_OVERRIDE=$_EDGE_CONTAINER_API_ENDPOINT_OVERRIDE'
  - 'EDGE_NETWORK_API_ENDPOINT_OVERRIDE=$_EDGE_NETWORK_API_ENDPOINT_OVERRIDE'
  - 'GKEHUB_API_ENDPOINT_OVERRIDE=$_GKEHUB_API_ENDPOINT_OVERRIDE'
  - 'CLUSTER_INTENT_BUCKET=$_CLUSTER_INTENT_BUCKET'
  - 'SOURCE_OF_TRUTH_REPO=$_SOURCE_OF_TRUTH_REPO'
  - 'SOURCE_OF_TRUTH_BRANCH=$_SOURCE_OF_TRUTH_BRANCH'
  - 'SOURCE_OF_TRUTH_PATH=$_SOURCE_OF_TRUTH_PATH'
  - 'GIT_SECRET_ID=$_GIT_SECRET_ID'
  - 'GIT_SECRETS_PROJECT_ID=$_GIT_SECRETS_PROJECT_ID'
  - 'STORE_ID=$_STORE_ID'
  - 'ZONE=$_ZONE'

timeout: 600s
options:
  logging: CLOUD_LOGGING_ONLY