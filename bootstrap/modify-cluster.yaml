steps:

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: Read cluster intent and update cluster
  script: |
    #!/usr/bin/env bash
    set +x

    function die() {
      echo "Cluster Modify Failed: $1"
      exit 1
    }

    [[ -z "${STORE_ID}" ]] && die "STORE_ID not set"

    NODE_LOCATION=${ZONE}
    [[ -z "$NODE_LOCATION" ]] && die "ZONE not set"

    apt-get update
    apt-get install -y gettext-base
    apt-get install -y csvtool

    TOKEN=$(gcloud secrets versions access latest --secret=$GIT_SECRET_ID \
        --project $GIT_SECRETS_PROJECT_ID)

    git clone -b $SOURCE_OF_TRUTH_BRANCH https://oauth2:$TOKEN@$SOURCE_OF_TRUTH_REPO repo

    cp repo/$SOURCE_OF_TRUTH_PATH ./cluster-intent-registry.csv

    export CLUSTER_INTENT_ROW=$(awk -F , "\$1 == \"$STORE_ID\" || \$1 == \"\\\"$STORE_ID\\\"\"" cluster-intent-registry.csv)
    echo $CLUSTER_INTENT_ROW
    [[ -z "${CLUSTER_INTENT_ROW}" ]] && die "Cluster intent not found for store ${STORE_ID}"

    export CLUSTER_INTENT_HEADER=$(head -1 cluster-intent-registry.csv)
    export CLUSTER_INTENT="$CLUSTER_INTENT_HEADER"$'\n'"$CLUSTER_INTENT_ROW"

    # Set parameters from cluster intent
    export MACHINE_PROJECT_ID=$(echo "$CLUSTER_INTENT" | csvtool namedcol "machine_project_id" - | csvtool drop 1 -)
    export FLEET_PROJECT_ID=$(echo "$CLUSTER_INTENT" | csvtool namedcol "fleet_project_id" - | csvtool drop 1 -)
    export CLUSTER_NAME=$(echo "$CLUSTER_INTENT" | csvtool namedcol "cluster_name" - | csvtool drop 1 -)
    export LOCATION=$(echo "$CLUSTER_INTENT" | csvtool namedcol "location" - | csvtool drop 1 -)
    export MAINTENANCE_WINDOW_START=$(echo "$CLUSTER_INTENT" | csvtool namedcol "maintenance_window_start" - | csvtool drop 1 -)
    export MAINTENANCE_WINDOW_END=$(echo "$CLUSTER_INTENT" | csvtool namedcol "maintenance_window_end" - | csvtool drop 1 -)
    export MAINTENANCE_WINDOW_RECURRENCE=$(echo "$CLUSTER_INTENT" | csvtool namedcol "maintenance_window_recurrence" - | csvtool drop 1 -)
    export SUBNET_VLANS=$(echo "$CLUSTER_INTENT" | csvtool namedcol "subnet_vlans" - | csvtool drop 1 - | tr -d '"')

    if [ -n "${EDGE_CONTAINER_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/edgecontainer to $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/edgecontainer $EDGE_CONTAINER_API_ENDPOINT_OVERRIDE
    fi

    if [ -n "${GKEHUB_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/gkehub to $GKEHUB_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/gkehub $GKEHUB_API_ENDPOINT_OVERRIDE
    fi

    if [ -n "${EDGE_NETWORK_API_ENDPOINT_OVERRIDE:-}" ]; then
      echo "Setting api_endpoint_overrides/edgenetwork to $EDGE_NETWORK_API_ENDPOINT_OVERRIDE"
      gcloud config set api_endpoint_overrides/edgenetwork $EDGE_NETWORK_API_ENDPOINT_OVERRIDE
    fi

    if [[ -z "${MAINTENANCE_WINDOW_START}" || ${MAINTENANCE_WINDOW_END} || \
            ${MAINTENANCE_WINDOW_RECURRENCE} ]]; then
      echo "All maintenance window fields are not set, skipping"
      echo "MAINTENANCE_WINDOW_START=${MAINTENANCE_WINDOW_START}"
      echo "MAINTENANCE_WINDOW_END=${MAINTENANCE_WINDOW_END}"
      echo "MAINTENANCE_WINDOW_RECURRENCE=${MAINTENANCE_WINDOW_RECURRENCE}"
    else
      gcloud edge-cloud container clusters update $CLUSTER_NAME \
          --project=$FLEET_PROJECT_ID \
          --location=$LOCATION \
          --maintenance-window-start=$MAINTENANCE_WINDOW_START \
          --maintenance-window-end=$MAINTENANCE_WINDOW_END \
          --maintenance-window-recurrence=$MAINTENANCE_WINDOW_RECURRENCE
      [[ $? -ne 0 ]] && die "Maintenance window update failed"
    fi

    for vlan in $(echo $SUBNET_VLANS | csvtool transpose -); do
      EXISTING_VLAN=$(gcloud edge-cloud networking subnets list --location $LOCATION \
          --zone $NODE_LOCATION --project $MACHINE_PROJECT_ID \
          --filter="VLANID=$vlan" --format="json")

      [[ $? -ne 0 ]] && die "Unable to query for subnets"

      if [ "$EXISTING_VLAN" = "[]" ]; then
        gcloud edge-cloud networking subnets create "network-$vlan" \
            --vlan-id=$vlan \
            --network=default \
            --location=$LOCATION \
            --zone=$NODE_LOCATION \
            --project $MACHINE_PROJECT_ID 
        [[ $? -ne 0 ]] && die "Subnet creation failed"
      else
        echo "VLAN $vlan already exists"
      fi
    done

    echo "Cluster Modify Succeeded: Completed reconciling $NODE_LOCATION"

  env:
  - 'STORE_ID=$_STORE_ID'
  - 'ZONE=$_ZONE'
  - 'EDGE_CONTAINER_API_ENDPOINT_OVERRIDE=$_EDGE_CONTAINER_API_ENDPOINT_OVERRIDE'
  - 'EDGE_NETWORK_API_ENDPOINT_OVERRIDE=$_EDGE_NETWORK_API_ENDPOINT_OVERRIDE'
  - 'GKEHUB_API_ENDPOINT_OVERRIDE=$_GKEHUB_API_ENDPOINT_OVERRIDE'
  - 'CLUSTER_INTENT_BUCKET=$_CLUSTER_INTENT_BUCKET'
  - 'SOURCE_OF_TRUTH_REPO=$_SOURCE_OF_TRUTH_REPO'
  - 'SOURCE_OF_TRUTH_BRANCH=$_SOURCE_OF_TRUTH_BRANCH'
  - 'SOURCE_OF_TRUTH_PATH=$_SOURCE_OF_TRUTH_PATH'
  - 'GIT_SECRET_ID=$_GIT_SECRET_ID'
  - 'GIT_SECRETS_PROJECT_ID=$_GIT_SECRETS_PROJECT_ID'

timeout: 14400s
options:
  logging: CLOUD_LOGGING_ONLY
